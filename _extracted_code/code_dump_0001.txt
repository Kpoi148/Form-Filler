### Dump file: code_dump_0001.txt

===== FILE START =====
Địa chỉ: background.js
Kích thước gốc: 633 bytes
----------------------
chrome.runtime.onInstalled.addListener(() => {
    chrome.storage.local.get(['kff_state'], res => {
        if (!res.kff_state) {
            const id = 'p_default';
            const state = {
                profiles: {
                    [id]: {
                        name: 'default', items: [
                            { k: 'email', v: '' },
                            { k: 'name', v: '' }
                        ]
                    }
                },
                activeProfileId: id,
                autoFill: false
            };
            chrome.storage.local.set({ kff_state: state });
        }
    });
});


===== FILE END =====

===== FILE START =====
Địa chỉ: contentScript.js
Kích thước gốc: 5125 bytes
----------------------
console.log("✅ content script loaded on this tab", location.href);

(function () {
    // Listen fill requests
    chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
        if (msg.action === 'fill') {
            chrome.storage.local.get(['kff_state'], res => {
                const state = res.kff_state || {};
                const profile = state.profiles && state.profiles[msg.profileId];
                if (profile) {
                    console.log('Filling with items:', profile.items);
                    fillUsingItems(profile.items);
                    sendResponse({ ok: true });
                } else sendResponse({ ok: false, reason: 'no-profile' });
            });
            // return true to indicate async response
            return true;
        }
    });

    // optional: auto-fill option
    chrome.storage.local.get(['kff_state'], res => {
        const st = res.kff_state || {};
        if (st.autoFill && st.activeProfileId && st.profiles && st.profiles[st.activeProfileId]) {
            fillUsingItems(st.profiles[st.activeProfileId].items);
        }
    });

    // core fill function
    function fillUsingItems(items) {
        if (!Array.isArray(items) || items.length === 0) return;
        const nodes = Array.from(document.querySelectorAll('input, textarea, select'));
        items.forEach(item => {
            const key = (item.k || '').toLowerCase();
            const val = item.v || '';
            nodes.forEach(node => {
                if (matchesKeyword(node, key) && node.value.trim() === '') {  // Skip nếu đã có giá trị
                    chrome.storage.local.get(['debugMode'], res => {
                        const debug = res.debugMode || false;
                        if (debug) console.debug('Matched node:', node, 'with key:', key, 'val: [hidden]');
                    });
                    try {
                        if (node.tagName.toLowerCase() === 'select') {
                            node.value = val;
                            node.dispatchEvent(new Event('change', { bubbles: true }));
                        } else if (node.type === 'checkbox' || node.type === 'radio') {
                            // checkbox/radio: set checked if value matches or if val truthy
                            if (val === '' || val === null) {
                                node.checked = true;
                            } else {
                                if (node.value && node.value.toLowerCase() === val.toLowerCase()) node.checked = true;
                            }
                            node.dispatchEvent(new Event('change', { bubbles: true }));
                        } else if (node.type === 'date') {
                            node.valueAsDate = new Date(val);  // Xử lý date picker
                        } else {
                            node.focus();
                            node.value = val;
                            node.dispatchEvent(new Event('input', { bubbles: true }));
                            node.dispatchEvent(new Event('change', { bubbles: true }));
                        }
                    } catch (e) { console.warn('fill error', e); }
                }
            });
        });
    }

    function matchesKeyword(node, keyword) {
        const attrs = [];
        if (node.name) attrs.push(node.name);
        if (node.id) attrs.push(node.id);
        if (node.placeholder) attrs.push(node.placeholder);
        if (node.getAttribute('aria-label')) attrs.push(node.getAttribute('aria-label'));
        if (node.className) attrs.push(String(node.className));
        // label text:
        try {
            const id = node.id;
            if (id) {
                const lab = document.querySelector('label[for="' + id + '"]');
                if (lab) attrs.push(lab.innerText);
            }
            // also check parent label
            const pl = node.closest('label');
            if (pl) attrs.push(pl.innerText);
        } catch (e) { }
        // combine and check
        const combined = attrs.join(' ').toLowerCase();
        return new RegExp('\\b' + keyword.toLowerCase() + '\\b', 'i').test(combined);  // Word boundary cho strict match
    }

    // optional: observe DOM changes for SPAs and fill when new forms appear (respect auto-fill)
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        const mo = new MutationObserver((mutations) => {
            // simple debounce
            if (window.__kff_mo_timeout) clearTimeout(window.__kff_mo_timeout);
            window.__kff_mo_timeout = setTimeout(() => {
                chrome.storage.local.get(['kff_state'], res => {
                    const st = res.kff_state || {};
                    if (st.autoFill && st.activeProfileId && st.profiles && st.profiles[st.activeProfileId]) {
                        fillUsingItems(st.profiles[st.activeProfileId].items);
                    }
                });
            }, 500);  // Tăng debounce lên 500ms
        });
        mo.observe(form, { childList: true, subtree: true });
    });
})();

===== FILE END =====

===== FILE START =====
Địa chỉ: popup.css
Kích thước gốc: 3694 bytes
----------------------
/*
Copyright 2025 Luu Chi Khanh
Phát triển bởi Luu Chi Khanh - Email: luuchikhanh082004@gmail.com
Github: Kpoi148
*/
:root {
    --primary-color: #007bff;
    --secondary-color: #6c757d;
    --danger-color: #dc3545;
    --toggle-on: #28a745;
    --bg-color: #f8f9fa;
    --text-color: #333;
    --border-color: #dee2e6;
    --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    --transition: all 0.3s ease;
}

body {
    font-family: 'Roboto', sans-serif;
    width: 360px;
    padding: 10px;
    margin: 0;
    background: var(--bg-color);
    color: var(--text-color);
    overflow-y: auto;
    scroll-behavior: smooth;
}

.container {
    box-shadow: var(--shadow);
    border-radius: 8px;
    padding: 16px;
    background: white;
}

.container h2 {
    margin: 0 0 16px;
    font-size: 18px;
    text-align: center;
    font-weight: 500;
}

.row,
.button-row {
    display: flex;
    gap: 8px;
    align-items: center;
    margin: 12px 0;
}

.button-row {
    justify-content: space-between;
}

#kwTable {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    margin: 12px 0;
    border-radius: 4px;
    overflow: hidden;
}

#kwTable th,
#kwTable td {
    border: 1px solid var(--border-color);
    padding: 8px;
    font-size: 13px;
    text-align: left;
}

#kwTable th {
    background: #e9ecef;
    font-weight: 500;
}

#kwTable input {
    width: 100%;
    padding: 6px;
    border: none;
    font-size: 13px;
    transition: var(--transition);
}

#kwTable input:focus {
    outline: none;
    box-shadow: inset 0 0 0 2px var(--primary-color);
}

.actions {
    display: flex;
    gap: 6px;
    justify-content: center;
}

.btn {
    cursor: pointer;
    border: none;
    border-radius: 4px;
    padding: 8px 12px;
    font-size: 13px;
    font-weight: 500;
    transition: var(--transition);
    box-shadow: var(--shadow);
}

.btn:hover {
    transform: scale(1.05);
    box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
    animation: glow 0.5s ease-in-out;
}

.btn:active {
    transform: scale(0.95);
}

.btn-primary {
    background: var(--primary-color);
    color: white;
}

.btn-primary:hover {
    background: #0056b3;
}

.btn-danger {
    background: var(--danger-color);
    color: white;
}

.btn-danger:hover {
    background: #c82333;
}

.btn-secondary {
    background: var(--secondary-color);
    color: white;
}

.btn-secondary:hover {
    background: #5a6268;
}

.btn-toggle {
    background: var(--secondary-color);
    color: white;
}

.btn-toggle.on {
    background: var(--toggle-on);
}

.status {
    margin-top: 12px;
    font-size: 13px;
    text-align: center;
    color: #6c757d;
    transition: opacity 0.5s;
}

input[type="text"],
select {
    flex: 1;
    padding: 8px;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 13px;
    transition: var(--transition);
}

input:focus,
select:focus {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.25);
    outline: none;
}

label {
    display: flex;
    flex: 1;
    align-items: center;
    gap: 6px;
    font-size: 13px;
}

#addRow {
    display: flex;
    gap: 8px;
    align-items: center;
}

#addRow #kwInput {
    width: 25%;
}

#addRow #valInput {
    width: 45%;
}

#addRow .actions {
    width: 30%;
    justify-content: center;
}

@keyframes glow {
    0% {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    50% {
        box-shadow: 0 0 10px rgba(0, 123, 255, 0.5);
    }

    100% {
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
}

.footer {
    margin-top: 16px;
    text-align: center;
    font-size: 12px;
    color: #6c757d;
    border-top: 1px solid var(--border-color);
    padding-top: 8px;
}

===== FILE END =====

===== FILE START =====
Địa chỉ: popup.html
Kích thước gốc: 2619 bytes
----------------------
<!doctype html>
<html lang="vi">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Keyword Form Filler</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" />
    <link rel="stylesheet" href="popup.css" />
</head>

<body>
    <div class="container">
        <h2>Keyword Form Filler</h2>

        <!-- Profile controls -->
        <div class="row">
            <label for="profileSelect">Profile:</label>
            <select id="profileSelect"></select>
            <button id="newProfileBtn" class="btn btn-primary">New</button>
            <button id="renameProfileBtn" class="btn btn-secondary">Rename</button>
            <button id="deleteProfileBtn" class="btn btn-danger">Delete</button>
        </div>

        <!-- Keywords table -->
        <table id="kwTable">
            <thead>
                <tr>
                    <th>Keyword</th>
                    <th>Value</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <!-- Add new keyword row -->
        <div class="row" id="addRow">
            <input id="kwInput" placeholder="keyword (ex: email)" />
            <input id="valInput" placeholder="value (ex: a@b.com)" />
            <div class="actions">
                <button id="addBtn" class="btn btn-primary save-row">Add</button>
            </div>
        </div>

        <!-- Action buttons -->
        <div class="button-row">
            <button id="fillBtn" class="btn btn-primary">Fill on current tab</button>

            <!-- Auto-fill switch -->
            <label class="switch">
                <input type="checkbox" id="autoFillToggle" />
                <span class="slider"></span>
                <span class="switch-label">Auto-Fill</span>
            </label>
        </div>

        <div class="button-row">
            <button id="exportBtn" class="btn btn-secondary">Export</button>
            <button id="importBtn" class="btn btn-secondary">Import</button>
            <input type="file" id="importFile" style="display:none" accept=".json" />
        </div>

        <!-- Status messages -->
        <div id="status" class="status" role="alert"></div>

        <!-- Footer -->
        <footer class="footer">
            Phát triển bởi
            <a href="https://github.com/Kpoi148" target="_blank" rel="noopener noreferrer">Kpoi148</a>
            - 2025
        </footer>
    </div>

    <script src="popup.js"></script>
</body>

</html>

===== FILE END =====

===== FILE START =====
Địa chỉ: popup.js
Kích thước gốc: 7783 bytes
----------------------
// Copyright 2025 Luu Chi Khanh. All rights reserved.
// Phát triển bởi Luu Chi Khanh - Email: luuchikhanh082004@gmail.com
//Github: Kpoi148

// popup.js
const profileSelect = document.getElementById('profileSelect');
const kwTableBody = document.querySelector('#kwTable tbody');
const kwInput = document.getElementById('kwInput');
const valInput = document.getElementById('valInput');
const addBtn = document.getElementById('addBtn');
const fillBtn = document.getElementById('fillBtn');
const newProfileBtn = document.getElementById('newProfileBtn');
const deleteProfileBtn = document.getElementById('deleteProfileBtn');
const autoFillToggle = document.getElementById('autoFillToggle');
const exportBtn = document.getElementById('exportBtn');
const importBtn = document.getElementById('importBtn');
const importFile = document.getElementById('importFile');
const status = document.getElementById('status');
// Thêm: const renameProfileBtn = document.getElementById('renameProfileBtn'); (thêm button vào HTML nếu cần)

let state = {
    profiles: {},       // id -> {name, items:[{k,v}]}
    activeProfileId: null,
    autoFill: false
};

function uid() { return 'p_' + Math.random().toString(36).slice(2, 9); }

function showStatus(msg, timeout = 2500) {
    status.style.opacity = 0;
    status.textContent = msg;
    status.style.opacity = 1; // Fade in
    setTimeout(() => { status.style.opacity = 0; status.textContent = ''; }, timeout);
}

function saveState() {
    chrome.storage.local.set({ kff_state: state }, () => showStatus('Saved'));
}

function loadState() {
    chrome.storage.local.get(['kff_state'], res => {
        if (res.kff_state) {
            state = res.kff_state;
        } else {
            // init default profile
            const id = uid();
            state.profiles[id] = { name: 'default', items: [] };
            state.activeProfileId = id;
            chrome.storage.local.set({ kff_state: state });
        }
        renderAll();
    });
}

function renderAll() {
    // profiles
    profileSelect.innerHTML = '';
    for (const id in state.profiles) {
        const opt = document.createElement('option');
        opt.value = id;
        opt.textContent = state.profiles[id].name;
        profileSelect.appendChild(opt);
    }
    if (!state.activeProfileId) {
        state.activeProfileId = Object.keys(state.profiles)[0];
    }
    profileSelect.value = state.activeProfileId;
    renderKeywords();
    autoFillToggle.textContent = `Toggle Auto-Fill (${state.autoFill ? 'On' : 'Off'})`;
    autoFillToggle.classList.toggle('on', state.autoFill); // Thêm class cho màu
}

function renderKeywords() {
    const prof = state.profiles[state.activeProfileId];
    kwTableBody.innerHTML = '';
    prof.items.forEach((it, idx) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `<td><input data-idx="${idx}" class="kw-key" value="${escapeHtml(it.k)}"></td>
                    <td><input data-idx="${idx}" class="kw-val" value="${escapeHtml(it.v)}"></td>
                    <td class="actions">
                      <button class="save-row" data-idx="${idx}">Save</button>
                      <button class="del-row" data-idx="${idx}">Del</button>
                    </td>`;
        kwTableBody.appendChild(tr);
    });
}

kwTableBody.addEventListener('click', (e) => {
    if (e.target.classList.contains('save-row')) {
        const idx = e.target.dataset.idx;
        const k = kwTableBody.querySelector(`.kw-key[data-idx="${idx}"]`).value.trim();
        const v = kwTableBody.querySelector(`.kw-val[data-idx="${idx}"]`).value;
        state.profiles[state.activeProfileId].items[idx] = { k, v };
        saveState();
        renderKeywords();
    } else if (e.target.classList.contains('del-row')) {
        const idx = Number(e.target.dataset.idx);
        state.profiles[state.activeProfileId].items.splice(idx, 1);
        saveState();
        renderKeywords();
    }
});

addBtn.addEventListener('click', () => {
    const k = kwInput.value.trim();
    const v = valInput.value;
    const prof = state.profiles[state.activeProfileId];
    if (!k) { showStatus('Keyword rỗng'); return; }
    if (prof.items.some(it => it.k === k)) { showStatus('Keyword trùng'); return; }
    state.profiles[state.activeProfileId].items.push({ k, v });
    kwInput.value = ''; valInput.value = '';
    saveState();
    renderKeywords();
});

profileSelect.addEventListener('change', (e) => {
    state.activeProfileId = e.target.value;
    saveState();
    renderKeywords();
});

newProfileBtn.addEventListener('click', () => {
    const name = prompt('Tên profile mới:', 'profile');
    if (!name) return;
    const id = uid();
    state.profiles[id] = { name, items: [] };
    state.activeProfileId = id;
    saveState();
    renderAll();
});

deleteProfileBtn.addEventListener('click', () => {
    if (!confirm('Xác nhận xóa profile này?')) return;
    delete state.profiles[state.activeProfileId];
    state.activeProfileId = Object.keys(state.profiles)[0] || null;
    saveState();
    renderAll();
});

fillBtn.addEventListener('click', () => {
    // send message to active tab
    chrome.tabs.query({ active: true, currentWindow: true }, tabs => {
        if (!tabs[0]) return;
        chrome.tabs.sendMessage(tabs[0].id, { action: 'fill', profileId: state.activeProfileId }, (resp) => {
            if (chrome.runtime.lastError) {
                console.error('Send message error:', chrome.runtime.lastError.message);
                showStatus('Không thể gửi message. Kiểm tra xem tab có load content script không.');
            } else {
                showStatus('Đã gửi lệnh điền.');
            }
        });
    });
});

autoFillToggle.addEventListener('click', () => {
    state.autoFill = !state.autoFill;
    saveState();
    autoFillToggle.textContent = `Toggle Auto-Fill (${state.autoFill ? 'On' : 'Off'})`;
    autoFillToggle.classList.toggle('on', state.autoFill);
});

exportBtn.addEventListener('click', () => {
    const data = JSON.stringify(state, null, 2);
    const blob = new Blob([data], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url; a.download = 'kff_export.json'; a.click();
    URL.revokeObjectURL(url);
});

importBtn.addEventListener('click', () => importFile.click());
importFile.addEventListener('change', (e) => {
    const f = e.target.files[0];
    if (!f) return;
    const reader = new FileReader();
    reader.onload = () => {
        try {
            const parsed = JSON.parse(reader.result);
            // basic validation
            if (!parsed || !parsed.profiles || typeof parsed.profiles !== 'object') {
                throw new Error('Invalid structure');
            }
            Object.values(parsed.profiles).forEach(p => {
                if (!Array.isArray(p.items)) throw new Error('Invalid items');
            });
            state = parsed;
            saveState();
            renderAll();
            showStatus('Import thành công');
        } catch (err) { showStatus('Import lỗi: ' + err.message); }
    };
    reader.readAsText(f);
});

// helper: escape for input value injection
function escapeHtml(s) { return (s || '').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&/g, '&amp;'); }

// Thêm rename nếu có button trong HTML
// renameProfileBtn.addEventListener('click', () => {
//     const newName = prompt('Tên mới:', state.profiles[state.activeProfileId].name);
//     if (newName) {
//         state.profiles[state.activeProfileId].name = newName;
//         saveState();
//         renderAll();
//     }
// });

document.addEventListener('DOMContentLoaded', loadState);

===== FILE END =====

===== FILE START =====
Địa chỉ: test-page.html
Kích thước gốc: 514 bytes
----------------------
<!doctype html>
<html>

<body>
    <h3>Test form</h3>
    <form>
        <label for="fullname">Full name</label>
        <input id="fullname" name="fullname" placeholder="Full name here" /><br /><br />
        <label for="email">Email</label>
        <input id="email" name="email" placeholder="your@mail.com" /><br /><br />
        <label for="phone">Phone</label>
        <input id="phone" name="phone" placeholder="phone" /><br /><br />
        <button type="submit">Submit</button>
    </form>
</body>

</html>

===== FILE END =====

